{"meta":{"title":"Be Better","subtitle":"设想十年后的自我","description":null,"author":"le0l1","url":"le0l1.github.io"},"pages":[],"posts":[{"title":"理财方式及投资组合","slug":"理财方式及投资组合","date":"2020-04-15T20:31:36.000Z","updated":"2020-04-15T12:53:15.474Z","comments":true,"path":"2020/04/15/理财方式及投资组合/","link":"","permalink":"le0l1.github.io/2020/04/15/理财方式及投资组合/","excerpt":"","text":"最近看了很多的理财方面的书籍， 补全了一些有关于资产配置的事情， 意识到之前买理财的时候 存在一些很大的盲区， 虽然没有造成什么亏损， 但是收益不佳，连通货膨胀率4%都未能跑赢. 总的来说 资产组合 就是将资产分配到不同的投资项 不同的市场，降低风险的做法， 涉及到下面几个名词 大家可以去了解一下 夏普比率 资产配置 最大回撤 基本原则 不要亏钱 巴菲特等投资大佬都特别强调过这一点， 一旦亏钱 你就必须得追求更大的收益率 达到你原本的目标 低估买入 高估卖出 资产要买便宜, 通过各种机构提供的估值表进行购买 指数投资 没有鉴股能力前, 请选择指数投资, 努力追求平均的时候 你就已经超越平均了 长期持有 不要做投机的人， 一旦投资失败 参考第一点 不要杠杠 告诫自己 杠杠放大风险，大神略过 投资策略通过参考GAA策略, 自己列了个相关的投资策略 (该策略在&lt;全球资产配置&gt;有提及) \b 大概就是按照上述的比例来进行资产的分配, 同时现金部分没有计算进去， 建议15%～20%的现金， 这样的话在经济衰退时期 可以有足够资金买入便宜资产 采用定投的方式，每一年做一次再平衡, 指数方面选择宽基搭配看好的行业指数 基金方面需要注意的是费率问题 相关书单 &lt;全球资产配置&gt; &lt;漫步华尔街&gt; &lt;原则&gt; &lt;哈利 布朗的永久投资组合&gt; &lt;钱: 7步创造终身收入&gt;","categories":[],"tags":[{"name":"理财","slug":"理财","permalink":"le0l1.github.io/tags/理财/"},{"name":"finance","slug":"finance","permalink":"le0l1.github.io/tags/finance/"}]},{"title":"多格验证码输入框的实现 ; ","slug":"多格验证码输入框的实现","date":"2020-04-15T20:20:41.000Z","updated":"2020-04-15T12:53:15.474Z","comments":true,"path":"2020/04/15/多格验证码输入框的实现/","link":"","permalink":"le0l1.github.io/2020/04/15/多格验证码输入框的实现/","excerpt":"","text":"近期遇到一个需求, 是要求做一个验证码的输入框, 设计图如下 最开始是毫无思路的, 于是去看了下相关案例了解下. 了解下了两种大概的思路, 通过linear-gradient来对输入框进行样式修改, 下面是我找到的一个StackoveFlow的实现方式 css1234567891011121314input[type=&quot;text&quot;] &#123; border: solid 1px dimgrey; width: 400px; background: repeating-linear-gradient(90deg, #ffffff 0px, #ffffff 19px, #000000 20px); color: dimgrey; font-family: monospace; letter-spacing: 1.75ch; padding-left: 0.8ch;&#125;input:focus &#123; outline: none; color: dodgerblue;&#125; html12&lt;label for=&quot;name&quot;&gt;Name:&lt;/label&gt;&lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;name&quot; maxlength=&quot;20&quot; /&gt; 另外一种则是通过控制focus来进行处理, 下面是我通过这种方式封装的组件 tsx123456789101112131415161718192021222324252627282930313233343536import &#123;Input, View&#125; from &quot;@tarojs/components&quot;;import Taro, &#123;Component&#125; from &quot;@tarojs/taro&quot;;import &apos;./index.scss&apos;type OwnProps =&#123; value: string onInput: (val?: string) =&gt; void&#125;export default class CodeInput extends Component&lt;OwnProps&gt; &#123; public state = &#123; focus: false, &#125; render() &#123; const computeClass = (index) =&gt; !!this.props.value[index] ? &apos;codeInput__code codeInput__code--active&apos; : &apos;codeInput__code&apos; return ( &lt;View className=&apos;codeInput&apos;&gt; &#123; Array.from(&#123; length: 6 &#125;).map((_, index) =&gt; ( &lt;View className=&#123;computeClass(index)&#125; onClick=&#123;() =&gt; this.setState(&#123; focus: true &#125;)&#125;&gt; &#123;this.props.value[index]&#125; &lt;/View&gt; )) &#125; &lt;Input className=&apos;codeInput__input&apos; focus=&#123;this.state.focus&#125; value=&#123;this.props.value&#125; onInput=&#123;(e: any) =&gt; this.props.onInput(e.target.value)&#125; maxLength=&#123;6&#125; /&gt; &lt;/View&gt; ) &#125;&#125; scss123456789101112131415161718192021222324252627.codeInput &#123; font-size: 34px; position: relative; display: flex;&#125;.codeInput__code &#123; width: 82px; height: 82px; line-height: 82px; text-align: center; margin-left: 22px; display: inline-block; border: 1PX solid #DFDFDF; &amp;:first-of-type &#123; margin-left: 0; &#125; &amp;--active &#123; border-color: $font-color; &#125;&#125;.codeInput__input &#123; position: absolute; top: 22px; left: 32px; opacity: 0; letter-spacing: 92px;&#125; 其思路就在于需要通过控制对验证码框的点击, 触发对透明输入框的focus, 用户的实际输入也就会到输入框里, 这时候每个小框再通过对应的下标获取到相应的值. 样式方面需要注意处理的是 letter-spacing, 如果没有处理, 则会导致 用户输入时的光标与对应的小框位置不匹配.","categories":[],"tags":[{"name":"FE","slug":"FE","permalink":"le0l1.github.io/tags/FE/"},{"name":"Taro","slug":"Taro","permalink":"le0l1.github.io/tags/Taro/"}]},{"title":"关于package-lock, 你知道多少?","slug":"关于package-lock-你知道多少","date":"2020-04-15T20:19:35.000Z","updated":"2020-04-15T12:53:15.474Z","comments":true,"path":"2020/04/15/关于package-lock-你知道多少/","link":"","permalink":"le0l1.github.io/2020/04/15/关于package-lock-你知道多少/","excerpt":"","text":"说到package-lock.json, 大家应该知道当执行npm install之后会产生, 实际上凡是当npm执行涉及到node_modules及package.json改动的操作时, package-lock.json都会发生改变, 其具体描述了当前依赖树是什么样子及每个依赖锁定的版本 package-lock.json是在npm v5.x.x开始有的, 在平时的项目中，笔者看到很多人都是直接将package-lock.json删除, 重新安装 忽略了其作用，其实它可以帮助我们更好的做好依赖管理，来看看文档里列举的几项优点 Describe a single representation of a dependency tree such that teammates, deployments, and continuous integration are guaranteed to install exactly the same dependencies. Provide a facility for users to “time-travel” to previous states of node_modules without having to commit the directory itself. To facilitate greater visibility of tree changes through readable source control diffs. And optimize the installation process by allowing npm to skip repeated metadata resolutions for previously-installed packages. 上面大概的意思是 我们能够通过package-lock.json保证在CI和部署这样的场景下保证依赖的一致性, 同时更好的做好依赖的版本控制, 而且它还可以起到优化依赖安装, 提高安装速度 抛开其他几点不说，我们先说一下CI和部署这样的场景下保证依赖的一致性, 笔者认为这点是package-lock.json给我们带来的最大好处 场景笔者曾经遇到一个这样的场景, 之前安装过的第三方依赖vue-property-decorator，在本地开发时是正常工作的，但是当部署到线上时, 实际表现不一致, 排查下发现是线上环境与开发环境版本不一致导致的, 最后通过npm ci配合package-lock.json解决了这个问题. 当然你也可以通过写死版本号的方式来做到这样，但是既然有了package-lock.json这样更好的解决方案，为何不用呢？ 注意需要注意的是 当package.json的依赖有更新的版本时, 安装依赖的版本会被更新, 所以为确保在CI和部署这样的场景下保证依赖的一致性，请使用npm ci进行相关依赖， 这个命令会完全按照package-lock.json锁定的版本进行安装 相关参考npm install与package-lock.json相关issuenpmjs docseverything-you-wanted-to-know-about-package-lock-json","categories":[],"tags":[{"name":"FE","slug":"FE","permalink":"le0l1.github.io/tags/FE/"},{"name":"npm","slug":"npm","permalink":"le0l1.github.io/tags/npm/"}]},{"title":"GraphQL是什么？ 它能带来什么？","slug":"GraphQL是什么？ 它能带来什么？","date":"2019-05-04T18:04:04.000Z","updated":"2020-04-15T12:53:15.474Z","comments":true,"path":"2019/05/04/GraphQL是什么？ 它能带来什么？/","link":"","permalink":"le0l1.github.io/2019/05/04/GraphQL是什么？ 它能带来什么？/","excerpt":"","text":"GraphQL是Facebook于2012年创造的一种用于描述CS应用中数据模型的能力和要求的语言 GraphQL的主要能力是用于API的查询,它能够提供很强大的聚合能力,同时提供了类型系统, 所有的类型系统都是通过代码来定义，一个 GraphQL 服务是通过定义类型和类型上的字段来创建的，然后给每个类型上的每个字段提供解析函数 通过一个简单地例子来说明下GraphQL的好处吧 现在有如下的业务场景，作为前端 我现在需要实现一个带有轮播图和产品列表的首页 如果后台接口是restful, 而没有后端来做接口的粘合的话, 前端应该会产生一下两个请求 GET /banner/index GET /products 但是如果是GraphQL的话， 就不一样了 1234query fetchIndexTemplate &#123; banner products&#125; 仅仅通过将banner、products写在同一个查询下，不需要额外的工作量，前端只产生了一次请求 还有一方面就是关于用户输入的检验,GraphQL的类型系统也给予了非常大的帮助,通常我们在做后端的接口时,需要对前端的输入做很多的validate 可能在Java中我们会通过注解的形式来处理 1234public class User &#123; @NotNull private String name;&#125; 而在GraphQL,我们可以直接通过schema的定义轻松限制 1234type User &#123; &quot;name has to be String and it`s required&quot; name: String!&#125; 同时通过Scalar自定义类型 我们可以添加更多的类型来限制前端的输入 并且GraphQL可以粘合DB、RestFul, RPC等等各类的方式，只需要实现对应的Resolver就OK了，同时可以在这一层做容错、鉴权、缓存等等 对应的，GraphQL这层来做BFF的话,一定程度上是有转发带来的损耗的，同时Schema的设计不合理，会带来重复拉取数据等问题, 并且还存在一定的技术成本 总之对待技术，我们不能只看到其中的好处，也有去设想不同场景下技术方案的优劣性","categories":[],"tags":[{"name":"GraphQL","slug":"GraphQL","permalink":"le0l1.github.io/tags/GraphQL/"}]},{"title":"XP极限编程","slug":"XP极限编程","date":"2019-04-15T03:13:00.000Z","updated":"2020-04-15T12:53:15.474Z","comments":true,"path":"2019/04/15/XP极限编程/","link":"","permalink":"le0l1.github.io/2019/04/15/XP极限编程/","excerpt":"","text":"最近在做项目的时候会遇到一些工程层面的问题,主要是软件质量没有保障、无法快速迭代、需求频繁等问题。因此我特地去找了一下相关方面的资料。 无意之间我发现了 XP 编程 XP 编程xp 编程也称为极限编程, 主要是分为几个部分 价值观 原则 实践 XP 编程的价值观中强调的是多沟通、有问题及时反馈、尊重等等. 原则方面讲究的是人性化、多样性、反省、改进等等 从价值观和原则方面来讲, XP 编程期望的是一个具有共同目标并且能够不断进步的一个团队。 从实践方面来讲, XP 编程鼓励测试先行、增量设计、持续集成、自动化、小步迭代、频繁迭代、结对编程 首先抛开书本上的知识来讲, 单从程序员的角度来讲讲我对 XP 编程实践方面的几个点的理解 结对编程俗话说的好, 三个臭皮匠顶过诸葛亮, 在与其余的同事的结对编程中, 能够迸发出更多更好的思维，同时能够审视现有的设计是否合理, 使彼此都更加的专注, 同时对彼此的团队实践负责 持续集成现在的 CI CD 这类的工具是非常多的, 通过将构建和发布这类的工作自动化, 可以大大地提升效率, 减轻程序员的压力, 同时加上测试 lint 类的工具能够从一定程度上提高我们的代码质量 测试优先测试优先 其实讲的就是 TDD 了, 在编写功能时先编写对应功能的测试用例, 之后在实现对应的功能逻辑, TDD 相当于是用测试用例来定义了功能需要实现的Interface, 而后的开发只是对于Interface的实现, 在配合上之前的持续集成 这样我们就不会出现那种这个 bug 修好别的 bug 又出现的情况, 通过测试来保证了程序的可用性 小步迭代在 XP 编程中，会将用户需求变成一个个story,并且进行重要度排序, 然后每一周都会有对应的story进行迭代, 然后每天都要进行多次集成和测试，最后会有周会来总结当前进度及反省上周问题等等 以上部分是我读过 XP 编程后自己的一些总结, 确实, 就我待过的项目来说, 测试不足 自动化程度低 需求没有优先级等等一系列问题, 导致项目的质量不够 与预期的工期也是相差甚远,毫无软件工程性可言, 现阶段我打算逐步将一些 XP 的理念融入工作中, 提升效率 提升软件质量","categories":[],"tags":[{"name":"软件工程","slug":"软件工程","permalink":"le0l1.github.io/tags/软件工程/"}]},{"title":"CSS编写规范 BEM","slug":"CSS编写规范-BEM","date":"2019-03-05T03:45:37.000Z","updated":"2020-04-15T12:53:15.474Z","comments":false,"path":"2019/03/05/CSS编写规范-BEM/","link":"","permalink":"le0l1.github.io/2019/03/05/CSS编写规范-BEM/","excerpt":"","text":"写 CSS 并不是一件简单的工作，类名的取法、归类，但项目愈加庞大，因为 CSS 引起的各种问题会越来越多。之前一直对 css 不怎么感冒,也没有了解过相关规范,在项目中也都是用CSS Module或者Scoped Style这种形式将类名进行混淆,并没有一个良好的规范来约定整个项目的样式编写,因此特地找了下对应的规范 BEM 简单讲一下BEM的命名规则,BEM分为 3 块 Block Element Modifiler 通用要求如下: 类名可以包含拉丁字母，数字和短划线 只使用类选择器 即 class 不要使用 tag name 比如 h1 p 与当前的页面的其他 block 或者 Element 没有依赖关系 Block Block即为块,通常的话我们可以根据组件来进行 block 的划分, 命名方面很简单： 1.block Element Element为元素, element 的类名为其上层 block 的名称再加上__ 1.block__elem Modifier Modifier为 block 或者 element 的某种状态, 类名为 block 或者 element 的类名加上-- 12.block--theme-light.block__elem--theme-light 举几个例子理解下 block &amp;&amp; element 123456789&lt;style&gt; .block &#123; &#125; .block__elem &#123; &#125;&lt;/style&gt;&lt;div class=\"block\"&gt; &lt;div class=\"block__elem\"&gt;&lt;/div&gt;&lt;/div&gt; modifiler 123456789101112131415&lt;style&gt; .block &#123; &#125; .block--theme &#123; &#125; .block__elem &#123; &#125; .block--theme .block__elem &#123; &#125; .block__eleme--disable &#123; &#125;&lt;/style&gt;&lt;div class=\"block block--theme\"&gt; &lt;div class=\"block__elem block__eleme--disable\"&gt;&lt;/div&gt;&lt;/div&gt; 整体下来，BEM 还是挺简单的，感觉很适用于 UI 组件库这样的场景,同时也可以和 css module 结合使用.总的来说,BEM 整体提供了一套规范来树立一个比较良好的结构,遵循一定的规则来约束开发者,但是也会带来类名过长等问题。以后的项目的话可以尝试使用","categories":[],"tags":[{"name":"FE","slug":"FE","permalink":"le0l1.github.io/tags/FE/"}]},{"title":"Circle CI搭配Hexo 真香","slug":"Circle-CI搭配Hexo-真香","date":"2019-02-28T14:31:36.000Z","updated":"2020-04-15T12:53:15.474Z","comments":true,"path":"2019/02/28/Circle-CI搭配Hexo-真香/","link":"","permalink":"le0l1.github.io/2019/02/28/Circle-CI搭配Hexo-真香/","excerpt":"","text":"最近又开始把个人博客搞起来了，之前搞过一次，但是后面就没弄了…惰性啊! Hexo 的搭建Hexo 的搭建还是蛮简单的，命令行几行搞定, 参考Hexo 文档,这里就不细讲了 多台机器上写 Blog\b 怎么办？\bHexo 发布主要是打包静态文件然后部署,\b\b\b\b\b 但是如果我们是在不同的机器上写 \bBlog 的话，那就很操蛋了, 可能又要重新搭建…,\b 这样的话为了 \b 多台机器上都能流利地写吹逼，一般都会将 hexo 的文件放到 github 上，在别的机器上直接 clone 下来，\b 然后将可以继续愉快地吹逼了～ 将发布工作交给 Cir\bcle CI\b\bCricle CI 是我在看 Youtube 广告上看到的(vue js 貌似也在用这个), 最近这段时间也是在弄一些 CI CD 之类的东西，建立一些工作流之类的, \b 简单看了下可以直接 watch \bgithub repo,\b 最重要的是还是免费的, 好吧 \b 还要啥自行车 撸袖子开干吧 \b\b 简单注册后, 将 github 的 repo 添加到 project 中，并 Follow \b\b然后需要在自己的 repo 建立/circleci/config.yml，这个就是 circleci 配置,这里我贴一下我现在的发布配置 1234567891011121314151617181920version: 2jobs: build: docker: - image: node:current working_directory: ~/repo steps: # Special step used to check out source code to the configured - checkout - run: name: install node_modules command: npm i - run: name: deploy command: npm run deploy branches: only: - dev 上面我是仅指定了dev分支进行发布，因为 Hexo 就是我的源代码,最后一步 deploy 就是打包发布到 github page 上去\b QA Circle CI npm install 的时候报错没有 \bpackage.json Circle CI 配置里要注意steps.checkout, 没有这一步 Circle CI 是不会自动拉源代码的 \bHexo 在 \b\b 构建发布时提示没有权限 需要进入 Circle CI\b 权限配置 SSH Key","categories":[],"tags":[{"name":"CI","slug":"CI","permalink":"le0l1.github.io/tags/CI/"}]},{"title":"怎么做一个前端在线主题切换","slug":"怎么做一个前端在线主题切换","date":"2019-02-22T15:25:27.000Z","updated":"2020-04-15T12:53:15.474Z","comments":true,"path":"2019/02/22/怎么做一个前端在线主题切换/","link":"","permalink":"le0l1.github.io/2019/02/22/怎么做一个前端在线主题切换/","excerpt":"","text":"怎么做一个前端在线主题切换? 这个套路让我瞬间想起了 Ant Design, Ant Desgin 就有一个这样的功能，于是去看了官方文档。 文档上说的是利用 less 的 modifyVars 进行变量的覆写来实现的，于是我又去查了下less的文档, less.js会读取到rel=&quot;stylesheet/less&quot;的 link 的内容， 调用less.modifyVars会重新对读取到的内容进行编译，并且最终通过添加 &lt;style&gt;&lt;/style&gt;的形式， 覆盖掉之前的样式。 既然知道了这个原理，那我们需要想一下怎么利用less的这个特性实现页面主题色切换。 首先我们需要一个 less 变量来定义当前的主题色， 1@theme-color: black; 然后我们需要一个 less.js 来进行 modifyVars 的操作以及 less 文件的引入 12&lt;link rel=&quot;stylesheet/less&quot; type=&quot;text/css&quot; href=&quot;styles.less&quot; /&gt;&lt;script src=&quot;less.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt; 最后我们只需要去写一个改变当前主题色的方法 12345function changeTheme() &#123; window.less.modifyVars(&#123; \"@theme-color\": \"red\" &#125;)&#125; 好了, 上面就是我们的思路， 梳理好之后， 我们就要思考怎么和项目结合在一起 less 的变量问题，其实相对来讲我们的项目中并不只会有一个@theme-color这种变量，这里面我们可能会有十多个变量， 包括我们可以去定义下全局的字体、字体大小，我们需要根据项目的特性进行划分 我们怎么去把框架中的 less 抽到我们打包后的 dist 文件中, 这里我推荐的做法是通过file-loader来做，配置如下 1234567891011121314151617// 我们需要在less-loader里将我们不要打包的less exclude掉// 本例中不需要打包的less为 styles.less&#123; test: /\\.less$/, use: &quot;less-loader&quot;, exclude: /styles\\.less/&#125;,// 然后利用file-loader 将styles.less打包到我们项目的根目录// 如果不放在根目录下，可以根据实际情况进行配置&#123; test: /\\.less$/, loader: &quot;file-loader&quot;, options: &#123; name: &quot;[name].[ext]&quot; // 默认的话 会将name hash掉 &#125; include: /styles\\.less/&#125; 我们在项目中引用的话,就可以直接通过一下形式进行引用 1&lt;link rel=&quot;stylesheet/less&quot; type=&quot;text/css&quot; href=&quot;styles.less&quot; /&gt; less.js一般来说，我们可以直接通过在 html 里面加 script 标签的形式来做，但是我们需要考虑的是并不是每一个用户进来都会用主题换色这样一个功能，所以我们可以利用 webpack 的lazy load来做些小优化。 12345678910async function loadLess(option) &#123; // 如果之前已经加载就不再重复\b加载， 直接返回less if (!window.less) &#123; // 通过先定义less 来注入option 参考 lesscss.org window.less = option return await import(\"less\") &#125; else &#123; return window.less &#125;&#125; 最后思考,如果我们下次遇到一个需求是说把全站的 button 的颜色都要直接在线变色,其实这就是一个前期架构的问题了,如果我们能在项目早期去做一些样式的抽象和管理，对于后续我们去实现这样一些需求,我们就不再头疼了,我们可以基于 less 的这种方式,去做一些整站的样式管理,项目也会更加清晰 易于修改.","categories":[],"tags":[{"name":"FE","slug":"FE","permalink":"le0l1.github.io/tags/FE/"}]},{"title":"Java 注解依赖注入简易实现","slug":"Java-注解依赖注入简易实现","date":"2019-02-22T14:49:20.000Z","updated":"2020-04-15T12:53:15.474Z","comments":true,"path":"2019/02/22/Java-注解依赖注入简易实现/","link":"","permalink":"le0l1.github.io/2019/02/22/Java-注解依赖注入简易实现/","excerpt":"","text":"最近在学习 Java 的 Spring Boot 框架, 知道其精髓就是 DI 和 AOP, 其中对于 DI(依赖注入), 我是比较感兴趣的，于是在网上查阅了一些资料，大概了解到了其大概原理是通过反射和注解来实现的，我先前还一直以为可以通过 Java 的注解和 TS 的装饰器是一样的，看过文档后才发现两个是有些不同的。简单比较下: Java 的注解是有元注解来描述自定义的注解，注解里面可以添加属性 然后还有属性默认值,需要配合反射才能发挥出对应的作用 TS 的装饰器更像是函数，对目标进行修饰, 直接进行修改 依赖注入的概念来讲还是很简单的，就是在面向对象中，我们的对象不可能实现全部的功能，有时候需要别的一些对象加入进来作为一个依赖 1234public class Main &#123; // need logger to do something... private Logger logger = new Logger();&#125; 上述的 demo 中, 我们的 Main 对象 需要一个 logger 来打印一些日志, 那我们就需要给他一个 logger 的实例，这就是最简单的依赖注入了 但是的话，如果每次需要一个新的依赖进来，我们都需要写一遍的 new XXX, 秉承 DRY 的原则，我们可以通过注解+反射的方式来做些处理，让注入的依赖自动返回实例, 而不需要手动地去 new 首先我们先声明一个注解来表示属性是需要进行依赖注入的 12345678public class animation &#123; // 表示注解作用于属性上 @Target(value = &#123; ElementType.FIELD &#125;) // 表示注解在运行时依然可用 @Retention(value = RetentionPolicy.RUNTIME) public @interface Inject &#123; &#125;&#125; 通过@Injenct 注解我们可以去注明那一些是需要进行依赖注入的。 1234public class Main &#123; @inject private Logger logger;&#125; 然后通过反射来获取注解 123456789101112131415161718192021222324 public class Parse &#123; public static &lt;T&gt; T getBean(Class&lt;T&gt; c) &#123; T result = null; try &#123; result = c.newInstance(); Field[] fields = c.getDeclaredFields(); for (Field field : fields) &#123; Inject inject = field.getAnnotation(Inject.class); if (inject != null) &#123; // 递归解决依赖问题 Object object = parse.getBean(field.getType()); // 针对private if (!field.isAccessible()) field.setAccessible(true); field.set(result, object); &#125; &#125; &#125; catch (Exception e) &#123; System.out.println(e); &#125; return result; &#125;&#125; 简单描述下上面的过程: 1.获取运行时的注解，但凡是有@Inject 的注解则进行第 2 步 2.通过 field.getType()获取注入的 class, 通过递归进行对一层层的依赖进行处理, 注意最后会返回注入的 class 的实例, 跳至第 3 步 3.如果 field 不可访问，则进行 setAccessible(true), 跳至第 4 步 4.对对应的 field(属性)进行设置, 完成整个依赖注入的过程","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"le0l1.github.io/tags/Java/"}]}]}